REpresentational State Transfer

1. client-server: separação de user interface e data storage.
2. stateless: cada request do client deve conter toda a informação necessária para entendê-lo, não pode depender de info armazenada no server.
3. cacheable: a resposta do request deve ser categorizada como cacheable, possibilitando o reuso pelo client em outro request posterior q seja similar.
4. uniform interface: entendi nada kkk, calma.
5. layered system: 
6. code on demand: REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts. This simplifies clients by reducing the number of features required to be pre-implemented.

Resource: qualquer informação que pode ser nomeada. Documento, imagem, serviço temporal, uma pessoa. Cada resource tem um resource identifier.
resource representation = estado do recurso num dado timestamp. A representação é formada por data, metadata descrevendo os dados e hypermedia.

Another thing which will help you while building RESTful APIs is that query based API results should be represented by a list of links with summary information, not by arrays of original resource representations because the query is not a substitute for identification of resources.

URI = uniform resource identifier

"Tells you the what the format of the request and response are"
CRUD operations: "Creating, Reading, Updating and Deleting records"